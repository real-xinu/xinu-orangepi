This directory holds Xinu sources for the Orange Pi. This branch contains the multicore migration of these sources, which is a work in progress and is not guaranteed to be stable.

Current status of multicore migration & known TODOs:
-This branch and multicore_migration_no_ethernet both have issues when writing text to stdout that cause either a data abort or a software interrupt exception. I attempted to remedy this in https://github.com/real-xinu/xinu-orangepi/commit/ba0711601ef2aae2caaffd9f31411865a6bbeba5, and while it did eliminate the data aborts, it introduced new deadlocks that caused problems elsewhere (such as in the network stack), so I reverted that commit. I think this issue stems from either our method of doing multicore inter-process communication or our TTY drivers, or possibly some combination of both. (This could also be related to the occasional deadlocking I've noticed in the VirtualBox multicore branch, so a solution to the problem here may be useful there as well).
-I have ported the networking code from master into this branch. It works most of the time, but will sometimes stop working as expected if there are several different types of traffic (such as a UDP throughput test, an externally initiated fast ping spam, and a ping initiated from within Xinu) all at the same time. I have not identified the specific cause and cannot always reproduce this, so this should be investigated further.
-Sometimes a new DHCP request will run when a domain name is pinged, causing Xinu to get a new IP address. This is unintended and should be fixed.

Additional notes on Multicore branches:
-This branch contains (as of 11/2/23) all of the commits in multicore_migration_no_ethernet plus Ethernet and networking code from master that has been adapted to use multicore locking facilities. As such, this branch is the "main" multicore branch.
-As far as I am aware, the Ethernet code merge has not introduced any regressions or bugs that were not already present in multicore_migration_no_ethernet, but I have opted to preserve multicore_migration_no_ethernet separately just in case.
--The only exception might be that I uncommented the cpu_sev(); call in initialize.c/nulluser(), which is what actually unblocks the other CPU cores after init. multicore_migration_no_ethernet did not have this uncommented, so only 1 core was actually being used for processes there. Therefore, there may be regressions I am unaware of, but this will ultimately need to be uncommented for the multicore version to be useful.

Current status of master branch:
-Single-core only
-All networking features are working reliably according to my tests. Xinu can handle up to 80mbps throughput reliably with multiple data streams
--Tested 3 components at once:
---1: Run "iperf -c [orange PI IP] -u -b 80m -t 30 -p 7" on another computer while udpeserver is running on the pi to test 80mbps throughput
---2: Run "ping -i 0.01 -c 1000 [orange PI IP]" on another computer to test fast pings
---3: In Xinu on the pi, run "ping 1.1.1.1" repeatedly to demonstrate that internally initiated network traffic is still delivered as expected even while other high-throughput activity is happening.

Known TODOs:
-None as of 12/5/2023

Multicore support is a work in progress - please refer to the README in multicore_migration for more information on its status.

Note on Makefile:
-If you freshly cloned the master branch or switched to it from a different branch and are getting compilation errors when running "make" from the compile/ directory, run "make clean", then "make" a few more times. Compilation will then complete successfully.

Note on Ethernet on the Orange Pi:
-The Orange Pi does not have a "true" MAC address embedded in the hardware - instead, it is up to the OS or bootloader to generate one at runtime. If you are using uboot to boot Xinu, uboot will generate its own MAC address, then Xinu will generate its own. If you have connection issues due to the randomized MAC, you can change occurrences of fetch_random_mac to fetch_linux_mac and change the bytes of the MAC to that of your uboot MAC address.
